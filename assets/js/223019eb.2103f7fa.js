"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[8338,5653,7644,6045,8454],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var i=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function n(e,t){if(null==e)return{};var a,i,s=function(e,t){if(null==e)return{};var a,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=i.createContext({}),d=function(e){var t=i.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=d(e.components);return i.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=n(e,["components","mdxType","originalType","parentName"]),p=d(a),u=s,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||r;return a?i.createElement(h,o(o({ref:t},l),{},{components:a})):i.createElement(h,o({ref:t},l))}));function u(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=p;var n={};for(var c in t)hasOwnProperty.call(t,c)&&(n[c]=t[c]);n.originalType=e,n.mdxType="string"==typeof e?e:s,o[1]=n;for(var d=2;d<r;d++)o[d]=a[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},50358:(e,t,a)=>{a.d(t,{Z:()=>c});var i=a(67294),s=a(52263);const r="authorByline_VoxI",o="authorLabel_a70t",n="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:a}=(0,s.Z)(),c=a.customFields.authors;return i.createElement(i.Fragment,null,t.authors&&i.createElement("div",{className:"docAuthors"},i.createElement("hr",null),t.authors.map((e=>i.createElement("div",{key:e,className:r},i.createElement("img",{className:n,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),i.createElement("div",null,i.createElement("div",{className:o},"Author:"),i.createElement("div",null,i.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),i.createElement("hr",null)))}},12538:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>y,frontMatter:()=>m,metadata:()=>u,toc:()=>g});var i=a(87462),s=(a(67294),a(3905)),r=a(50358),o=a(4975),n=a(34045),c=a(31788);a(71673);const d=a.p+"assets/images/redis-cache-aside-cache-miss-4fa819fee471e563d97bbd1ff2f92c28.png",l=a.p+"assets/images/redis-cache-aside-cache-hit-b1ddb8878048d38e56a8369632257e2d.png",m={id:"index-solutions-caching",title:"How to use Redis for Query Caching",sidebar_label:"How to use Redis for Query Caching",slug:"/howtos/solutions/microservices/caching",authors:["prasan","will"]},p=void 0,u={unversionedId:"howtos/solutions/microservices/caching/index-solutions-caching",id:"howtos/solutions/microservices/caching/index-solutions-caching",title:"How to use Redis for Query Caching",description:"What is query caching?",source:"@site/docs/howtos/solutions/microservices/caching/index-caching.mdx",sourceDirName:"howtos/solutions/microservices/caching",slug:"/howtos/solutions/microservices/caching",permalink:"/howtos/solutions/microservices/caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/caching/index-caching.mdx",tags:[],version:"current",lastUpdatedAt:1700152680,formattedLastUpdatedAt:"Nov 16, 2023",frontMatter:{id:"index-solutions-caching",title:"How to use Redis for Query Caching",sidebar_label:"How to use Redis for Query Caching",slug:"/howtos/solutions/microservices/caching",authors:["prasan","will"]},sidebar:"docs",previous:{title:"Microservices Communication with Redis Streams",permalink:"/howtos/solutions/microservices/interservice-communication"},next:{title:"How to use Redis for API Gateway Caching",permalink:"/howtos/solutions/microservices/api-gateway-caching"}},h={},g=[{value:"What is query caching?",id:"what-is-query-caching",level:2},{value:"Why you should use Redis for query caching",id:"why-you-should-use-redis-for-query-caching",level:2},{value:"Cache-aside with Redis (cache miss)",id:"cache-aside-with-redis-cache-miss",level:3},{value:"Cache-aside with Redis (cache hit)",id:"cache-aside-with-redis-cache-hit",level:3},{value:"Microservices architecture for an e-commerce application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce application frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"Caching in a microservices application with Redis and primary database (MongoDB/ Postgressql)",id:"caching-in-a-microservices-application-with-redis-and-primary-database-mongodb-postgressql",level:2},{value:"Get products by filter request",id:"get-products-by-filter-request",level:3},{value:"Get products by filter response (cache miss)",id:"get-products-by-filter-response-cache-miss",level:3},{value:"Get products by filter response (cache hit)",id:"get-products-by-filter-response-cache-hit",level:3},{value:"Implementing cache-aside with Redis and primary database (MongoDB/ Postgressql)",id:"implementing-cache-aside-with-redis-and-primary-database-mongodb-postgressql",level:3},{value:"Ready to use Redis for query caching?",id:"ready-to-use-redis-for-query-caching",level:2},{value:"Additional resources",id:"additional-resources",level:3}],f={toc:g};function y(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,i.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(r.Z,{frontMatter:m,mdxType:"Authors"}),(0,s.kt)(c.default,{mdxType:"SourceCode"}),(0,s.kt)("h2",{id:"what-is-query-caching"},"What is query caching?"),(0,s.kt)("p",null,"Have you ever been in a situation where your database queries are slowing down?\nQuery caching is the technique you need to speed database queries by using different caching methods while keeping costs down! Imagine that you built an e-commerce application. It started small but is growing fast. By now, you have an extensive product catalog and millions of customers."),(0,s.kt)("p",null,"That's good for business, but a hardship for technology. Your queries to primary database (MongoDB/ Postgressql) are beginning to slow down, even though you already attempted to optimize them. Even though you can squeak out a little extra performance, it isn't enough to satisfy your customers."),(0,s.kt)("h2",{id:"why-you-should-use-redis-for-query-caching"},"Why you should use Redis for query caching"),(0,s.kt)("p",null,"Redis is an in-memory datastore, best known for caching. Redis allows you to reduce the load on a primary database while speeding up database reads."),(0,s.kt)("p",null,"With any e-commerce application, there is one specific type of query that is most often requested. If you guessed that it\u2019s the product search query, you\u2019re correct!"),(0,s.kt)("p",null,"To improve product search in an e-commerce application, you can implement one of following caching patterns:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Cache prefetching"),": An entire product catalog can be pre-cached in Redis, and the application can perform any product query on Redis similar to the primary database."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Cache-aside")," pattern: Redis is filled on demand, based on whatever search parameters are requested by the frontend.")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you use ",(0,s.kt)("strong",{parentName:"p"},"Redis Cloud"),", cache aside is easier due to its support for JSON and search. You also get additional features such as real-time performance, High scalability, resiliency, and fault tolerance. You can also call upon high-availability features such as Active-Active geo-redundancy.")),(0,s.kt)("p",null,"This tutorial focuses on the ",(0,s.kt)("strong",{parentName:"p"},"cache-aside")," pattern. The goal of this design pattern is to set up ",(0,s.kt)("strong",{parentName:"p"},"optimal"),' caching (load-as-you-go) for better read operations. With caching, you might be familiar with a "cache miss," where you do not find data in the cache, and a "cache hit," where you can find data in the cache. Let\'s look at how the cache-aside pattern works with Redis for both a "cache miss" and a "cache hit."'),(0,s.kt)("h3",{id:"cache-aside-with-redis-cache-miss"},"Cache-aside with Redis (cache miss)"),(0,s.kt)("img",{src:d,alt:"Cache miss when using the cache-aside pattern with Redis",width:"500",className:"margin-bottom--md"}),(0,s.kt)("p",null,'This diagram illustrates the steps taken in the cache-aside pattern when there is a "cache miss." To understand how this works, consider the following process:'),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"An application requests data from the backend."),(0,s.kt)("li",{parentName:"ol"},"The backend checks to find out if the data is available in Redis."),(0,s.kt)("li",{parentName:"ol"},"Data is not found (a cache miss), so the data is fetched from the database."),(0,s.kt)("li",{parentName:"ol"},"The data returned from the database is subsequently stored in Redis."),(0,s.kt)("li",{parentName:"ol"},"The data is then returned to the application.")),(0,s.kt)("h3",{id:"cache-aside-with-redis-cache-hit"},"Cache-aside with Redis (cache hit)"),(0,s.kt)("p",null,'Now that you have seen what a "cache miss" looks like, let\'s cover a "cache hit." Here is the same diagram, but with the "cache hit" steps highlighted in green.'),(0,s.kt)("img",{src:l,alt:"Cache hit when using the cache-aside pattern with Redis",width:"500",className:"margin-bottom--md"}),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"An application requests data from the backend."),(0,s.kt)("li",{parentName:"ol"},"The backend checks to find out if the data is available in Redis."),(0,s.kt)("li",{parentName:"ol"},"The data is then returned to the application.")),(0,s.kt)("p",null,"The cache-aside pattern is useful when you need to:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Query data frequently"),": When you have a large volume of reads (as is the case in an e-commerce application), the cache-aside pattern gives you an immediate performance gain for subsequent data requests."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Fill the cache on demand"),": The cache-aside pattern fills the cache as data is requested rather than pre-caching, thus saving on space and cost. This is useful when it isn't clear what data will need to be cached."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Be cost-conscious"),": Since cache size is directly related to the cost of cache storage in the cloud, the smaller the size, the less you pay.")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you use ",(0,s.kt)("strong",{parentName:"p"},"Redis Cloud")," and a database that uses a JDBC driver, you can take advantage of ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/blog/redis-smart-cache/"},(0,s.kt)("u",null,(0,s.kt)("strong",{parentName:"a"},"Redis Smart Cache"))),", which lets you add caching to an application without changing the code. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/redis-field-engineering/redis-smart-cache"},(0,s.kt)("u",null,(0,s.kt)("strong",{parentName:"a"},"Click here to learn more!"))))),(0,s.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices architecture for an e-commerce application"),(0,s.kt)(n.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,s.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce application frontend using Next.js and Tailwind"),(0,s.kt)(o.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,s.kt)(c.default,{mdxType:"SourceCode"}),(0,s.kt)("h2",{id:"caching-in-a-microservices-application-with-redis-and-primary-database-mongodb-postgressql"},"Caching in a microservices application with Redis and primary database (MongoDB/ Postgressql)"),(0,s.kt)("p",null,"In our sample application, the products service publishes an API for filtering products. Here's what a call to the API looks like:"),(0,s.kt)("h3",{id:"get-products-by-filter-request"},"Get products by filter request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="docs/api/get-products-by-filter.md"',title:'"docs/api/get-products-by-filter.md"'},'// POST http://localhost:3000/products/getProductsByFilter\n{\n  "productDisplayName": "puma"\n}\n')),(0,s.kt)("h3",{id:"get-products-by-filter-response-cache-miss"},"Get products by filter response (cache miss)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"{25}","{25}":!0},'{\n  "data": [\n    {\n      "productId": "11000",\n      "price": 3995,\n      "productDisplayName": "Puma Men Slick 3HD Yellow Black Watches",\n      "variantName": "Slick 3HD Yellow",\n      "brandName": "Puma",\n      "ageGroup": "Adults-Men",\n      "gender": "Men",\n      "displayCategories": "Accessories",\n      "masterCategory_typeName": "Accessories",\n      "subCategory_typeName": "Watches",\n      "styleImages_default_imageURL": "http://host.docker.internal:8080/images/11000.jpg",\n      "productDescriptors_description_value": "<p style=\\"text-align: justify;\\">Stylish and comfortable, ...",\n      "createdOn": "2023-07-13T14:07:38.020Z",\n      "createdBy": "ADMIN",\n      "lastUpdatedOn": "2023-07-13T14:07:38.020Z",\n      "lastUpdatedBy": null,\n      "statusCode": 1\n    }\n    //...\n  ],\n  "error": null,\n  "isFromCache": false\n}\n')),(0,s.kt)("h3",{id:"get-products-by-filter-response-cache-hit"},"Get products by filter response (cache hit)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6}","{6}":!0},'{\n  "data": [\n    //...same data as above\n  ],\n  "error": null,\n  "isFromCache": true // now the data comes from the cache rather DB\n}\n')),(0,s.kt)("h3",{id:"implementing-cache-aside-with-redis-and-primary-database-mongodb-postgressql"},"Implementing cache-aside with Redis and primary database (MongoDB/ Postgressql)"),(0,s.kt)("p",null,"The following code shows the function used to search for products in primary database:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server/src/services/products/src/service-impl.ts"',title:'"server/src/services/products/src/service-impl.ts"'},"async function getProductsByFilter(productFilter: Product) {\n  const prisma = getPrismaClient();\n\n  const whereQuery: Prisma.ProductWhereInput = {\n    statusCode: DB_ROW_STATUS.ACTIVE,\n  };\n\n  if (productFilter && productFilter.productDisplayName) {\n    whereQuery.productDisplayName = {\n      contains: productFilter.productDisplayName,\n      mode: 'insensitive',\n    };\n  }\n\n  const products: Product[] = await prisma.product.findMany({\n    where: whereQuery,\n  });\n\n  return products;\n}\n")),(0,s.kt)("p",null,"You simply make a call to primary database (MongoDB/ Postgressql) to find products based on a filter on the product's ",(0,s.kt)("inlineCode",{parentName:"p"},"displayName")," property. You can set up multiple columns for better fuzzy searching, but we simplified it for the purposes of this tutorial."),(0,s.kt)("p",null,"Using primary database directly without Redis works for a while, but eventually it slows down. That's why you might use Redis, to speed things up. The cache-aside pattern helps you balance performance with cost."),(0,s.kt)("p",null,"The basic decision tree for cache-aside is as follows."),(0,s.kt)("p",null,"When the frontend requests products:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Form a hash with the contents of the request (i.e., the search parameters)."),(0,s.kt)("li",{parentName:"ol"},"Check Redis to see if a value exists for the hash."),(0,s.kt)("li",{parentName:"ol"},"Is there a cache hit? If data is found for the hash, it is returned; the process stops here."),(0,s.kt)("li",{parentName:"ol"},"Is there a cache miss? When data is not found, it is read out of primary database and subsequently stored in Redis prior to being returned.")),(0,s.kt)("p",null,"Here\u2019s the code used to implement the decision tree:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server/src/services/products/src/routes.ts"',title:'"server/src/services/products/src/routes.ts"'},"const getHashKey = (_filter: Document) => {\n  let retKey = '';\n  if (_filter) {\n    const text = JSON.stringify(_filter);\n    retKey = crypto.createHash('sha256').update(text).digest('hex');\n  }\n  return 'CACHE_ASIDE_' + retKey;\n};\n\nrouter.post(API.GET_PRODUCTS_BY_FILTER, async (req: Request, res: Response) => {\n  const body = req.body;\n  // using node-redis\n  const redis = getNodeRedisClient();\n\n  //get data from redis\n  const hashKey = getHashKey(req.body);\n  const cachedData = await redis.get(hashKey);\n  const docArr = cachedData ? JSON.parse(cachedData) : [];\n\n  if (docArr && docArr.length) {\n    result.data = docArr;\n    result.isFromCache = true;\n  } else {\n    // get data from primary database\n    const dbData = await getProductsByFilter(body); //method shown earlier\n\n    if (body && body.productDisplayName && dbData.length) {\n      // set data in redis (no need to wait)\n      redis.set(hashKey, JSON.stringify(dbData), {\n        EX: 60, // cache expiration in seconds\n      });\n    }\n\n    result.data = dbData;\n  }\n\n  res.send(result);\n});\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You need to decide what expiry or time to live (TTL) works best for your particular use case.")),(0,s.kt)("h2",{id:"ready-to-use-redis-for-query-caching"},"Ready to use Redis for query caching?"),(0,s.kt)("p",null,"You now know how to use Redis for caching with one of the most common caching patterns (cache-aside). It's possible to incrementally adopt Redis wherever needed with different strategies/patterns. For more resources on the topic of microservices, check out the links below:"),(0,s.kt)("h3",{id:"additional-resources"},"Additional resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Microservices with Redis",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/cqrs"},"CQRS")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/interservice-communication"},"Interservice communication")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/api-gateway-caching"},"API gateway caching")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.youtube.com/c/Redisinc"},"Redis YouTube channel")),(0,s.kt)("li",{parentName:"ul"},"Clients like ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"Node Redis")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Redis om Node")," help you to use Redis in Node.js applications."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," : To view your Redis data or to play with raw Redis commands in the workbench"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://redis.com/try-free/"},"Try Redis Cloud for free"))))}y.isMDXComponent=!0},34045:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var i=a(87462),s=(a(67294),a(3905));const r={},o=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",id:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,i.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"products service"),": handles querying products from the database and returning them to the frontend"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"orders service"),": handles validating and creating orders"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"order history service"),": handles querying a customer's order history"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"payments service"),": handles processing orders for payment"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"digital identity service"),": handles storing digital identity and calculating identity score"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"api gateway"),": unifies services under a single endpoint"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"mongodb/ postgresql"),": serves as the primary database, storing orders, order history, products, etc."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"redis"),": serves as the ",(0,s.kt)("strong",{parentName:"li"},"stream processor")," and caching database")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You don't need to use MongoDB/ Postgresql as your primary database in the demo application; you can use other ",(0,s.kt)("u",null,(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"prisma supported databases"))," as well. This is just an example.")))}m.isMDXComponent=!0},4975:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var i=a(87462),s=(a(67294),a(3905));const r={},o=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-ecommerce",id:"howtos/solutions/microservices/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-ecommerce",permalink:"/howtos/solutions/microservices/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,i.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,s.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,s.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in\n",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis")," and MongoDB/ Postgressql using ",(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"Prisma"),". Below you will find screenshots of the frontend of the e-commerce app:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Dashboard"),": Shows the list of products with search functionality"),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend products page",src:a(89628).Z,width:"2475",height:"1873"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Shopping Cart"),': Add products to the cart, then check out using the "Buy Now" button\n',(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend shopping cart",src:a(70114).Z,width:"2772",height:"1942"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Order history"),": Once an order is placed, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Orders")," link in the top navigation bar shows the order status and history"),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend order history page",src:a(61032).Z,width:"2511",height:"1351"})))))}m.isMDXComponent=!0},31788:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var i=a(87462),s=(a(67294),a(3905));const r={},o=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-source-code-tip",id:"howtos/solutions/microservices/common-data/microservices-source-code-tip",title:"microservices-source-code-tip",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",permalink:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,i.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,s.kt)("p",{parentName:"admonition"},"git clone --branch v4.2.0 ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}m.isMDXComponent=!0},71673:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var i=a(87462),s=(a(67294),a(3905));const r={},o=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/redis-enterprise",id:"howtos/solutions/microservices/common-data/redis-enterprise",title:"redis-enterprise",description:"You can use Redis Cloud as a multi-model primary database. Redis Cloud is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or Flash. It also supports Active-Active (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes.",source:"@site/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/redis-enterprise",permalink:"/howtos/solutions/microservices/common-data/redis-enterprise",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",tags:[],version:"current",lastUpdatedAt:1700152680,formattedLastUpdatedAt:"Nov 16, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,i.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"You can use ",(0,s.kt)("strong",{parentName:"p"},"Redis Cloud")," as a multi-model primary database. Redis Cloud is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or ",(0,s.kt)("strong",{parentName:"p"},"Flash"),". It also supports ",(0,s.kt)("strong",{parentName:"p"},"Active-Active")," (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes."),(0,s.kt)("p",null,"Redis Cloud has many built-in modular capabilities, making it a unified, real-time data platform. Redis Cloud is far more than a document database."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"JSON"),": Persists JSON documents"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Search"),": Indexes and searches JSON documents"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Probabilistic data structures"),": Provides bloom filters and other probabilistic data structures"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Time Series"),": Supports time series data structures"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Triggers and Functions"),": Syncs data to external databases via different pattern (write-behind/ write-through) or executes custom logic.")),(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," to view your Redis data or to play with raw Redis commands in the workbench."),(0,s.kt)("p",null,"If you're interested in diving deeper, try ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/try-free"},"Redis Cloud")," today for free!"))}m.isMDXComponent=!0},70114:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/design-cart-2-2a3b76656f26a754bed6a6c63ad8beef.png"},89628:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/design-dashboard-6a34137ca4862561cc2f065ed55ae081.png"},61032:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/design-order-history-16fc808f70b63d91a37a3ea76baa232d.png"}}]);