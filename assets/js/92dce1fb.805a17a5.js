"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[9884],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return t?a.createElement(k,l(l({ref:n},d),{},{components:t})):a.createElement(k,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=c;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(67294),r=t(86010);const s="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),r=t(67294),s=t(86010),l=t(72389),i=t(67392),o=t(7094),p=t(12466);const d="tabList__CuJ",u="tabItem_LNqP";function c(e){var n;const{lazy:t,block:l,defaultValue:c,values:m,groupId:k,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),N=(0,i.l)(y,((e,n)=>e.value===n.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===c?c:c??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,o.U)(),[x,w]=(0,r.useState)(f),S=[],{blockElementScrollPositionUntilNextRender:R}=(0,p.o5)();if(null!=k){const e=b[k];null!=e&&e!==x&&y.some((n=>n.value===e))&&w(e)}const T=e=>{const n=e.currentTarget,t=S.indexOf(n),a=y[t].value;a!==x&&(R(n),w(a),null!=k&&v(k,String(a)))},E=e=>{var n;let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]??S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]??S[S.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},h)},y.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>S.push(e),onKeyDown:E,onClick:T},l,{className:(0,s.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":x===n})}),t??n)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function m(e){const n=(0,l.Z)();return r.createElement(c,(0,a.Z)({key:String(n)},e))}},50358:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(67294),r=t(52263);const s="authorByline_VoxI",l="authorLabel_a70t",i="authorProfileImage_URwT";const o=function(e){let{frontMatter:n}=e;const{siteConfig:t}=(0,r.Z)(),o=t.customFields.authors;return a.createElement(a.Fragment,null,n.authors&&a.createElement("div",{className:"docAuthors"},a.createElement("hr",null),n.authors.map((e=>a.createElement("div",{key:e,className:s},a.createElement("img",{className:i,src:`/img/${o[e].image?o[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${o[e].name}`}),a.createElement("div",null,a.createElement("div",{className:l},"Author:"),a.createElement("div",null,a.createElement("a",{href:o[e].link,target:"_blank"},o[e].name),", ",o[e].title))))),a.createElement("hr",null)))}},34730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>L,contentTitle:()=>M,default:()=>j,frontMatter:()=>A,metadata:()=>P,toc:()=>_});var a=t(87462),r=(t(67294),t(3905)),s=t(65488),l=t(85162),i=(t(44996),t(50358));const o={toc:[]};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," command below exposes redis-server on port 6379 and RedisInsight on port 8001. You can use RedisInsight by pointing your browser to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8001"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install\n$ docker run -d --name redis-stack -p 6379:6379 -p 8001:8001 redis/redis-stack:latest\n")),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"redis-cli")," to connect to the server at ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:6379"),". If you don\u2019t have ",(0,r.kt)("inlineCode",{parentName:"p"},"redis-cli")," installed locally, you can run it from the Docker container like below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# connect\n$ docker exec -it redis-stack redis-cli\n")))}p.isMDXComponent=!0;const d={toc:[{value:"Using APT with Ubuntu/Debian",id:"using-apt-with-ubuntudebian",level:3},{value:"From the official RPM Feed",id:"from-the-official-rpm-feed",level:3},{value:"With snap",id:"with-snap",level:3},{value:"With AppImage",id:"with-appimage",level:3}]};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"using-apt-with-ubuntudebian"},"Using APT with Ubuntu/Debian"),(0,r.kt)("p",null,"Works with Ubuntu 16.04, 18.04, or 20.04 and Debian 11"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list\nsudo apt-get update\nsudo apt-get install redis-stack-server\n')),(0,r.kt)("h3",{id:"from-the-official-rpm-feed"},"From the official RPM Feed"),(0,r.kt)("p",null,"Works with RHEL7/CentOS7 or RHEL8/CentOS8"),(0,r.kt)("p",null,"Create the file /etc/yum.repos.d/redis.repo with the following contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Redis]\nname=Redis\nbaseurl=http://packages.redis.io/rpm/rhel7\nenabled=1\ngpgcheck=1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -fsSL https://packages.redis.io/gpg > /tmp/redis.key\nsudo rpm --import /tmp/redis.key\nsudo yum install epel-release\nsudo yum install redis-stack-server\n")),(0,r.kt)("h3",{id:"with-snap"},"With snap"),(0,r.kt)("p",null,"Download the ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/download/#redis-stack-downloads"},"latest Redis Stack snap package"),"."),(0,r.kt)("p",null,"To install, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ sudo snap install --dangerous --classic <snapname.snap>\n")),(0,r.kt)("h3",{id:"with-appimage"},"With AppImage"),(0,r.kt)("p",null,"Download the ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/download/#redis-stack-downloads"},"latest Redis Stack AppImage package"),"."),(0,r.kt)("p",null,"To enable the install, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ chmod a+x <AppImagefile>\n")),(0,r.kt)("p",null,"To install run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ ./<appimagefile>\n")))}u.isMDXComponent=!0;const c={toc:[]};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install redis-stack\n$ brew tap redis-stack/redis-stack\n$ brew install --cask redis-stack\n\n# start redis-stack\n$ redis-stack-server\n")))}m.isMDXComponent=!0;const k={toc:[]};function h(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Redis is not officially supported on Windows, so we recommend using Docker."),(0,r.kt)("p",null,"Please follow the Docker instructions, or watch the following video that covers using Redis through WSL on Windows."),(0,r.kt)("div",{class:"text--center"},(0,r.kt)("iframe",{width:"760",height:"415",src:"https://www.youtube.com/embed/_nFwPTHOMIY",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})))}h.isMDXComponent=!0;const g={toc:[]};function y(e){let{components:n,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connect to Redis using CLI or ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://redis.io/docs/stack/insight/"},"RedisInsight"))," (a GUI tool to visualize data & run commands)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"RedisInsight"),"\n",(0,r.kt)("img",{alt:"RedisInsight",src:t(62968).Z,width:"806",height:"486"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# syntax 1 : connect using host & port, followed by password\n$ redis-cli -h host -p port\n> AUTH password\nOK\n\n# example 1\n$ redis-cli -h redis15.localnet.org -p 6390\n> AUTH myUnguessablePassword\nOK\n\n# syntax 2 : connect using uri\n$ redis-cli -u redis://user:password@host:port/dbnum\n\n# example 2\n$ redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic CLI / RedisInsight workbench commands")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# syntax : Check specific keys\n> KEYS pattern\n\n# example\n> KEYS *\n\n#------------\n# syntax : Check number of keys in database\n> DBSIZE\n\n#------------\n# syntax : set a key value\n> SET key value EX expirySeconds\n\n# example\n> SET company redis EX 60\n\n#------------\n# syntax : get value by key\n> GET key\n\n# example\n> GET company\n\n#------------\n# syntax : delete keys\n> DEL key1 key2 key3 ... keyN\n\n# example\n> DEL company\n\n#------------\n# syntax : Check if key exists\n> EXISTS key1\n\n# example\n> EXISTS company\n\n#------------\n# syntax : set expiry to key\n> EXPIRE key seconds\n\n# example\n> EXPIRE lastname 60\n\n#------------\n# syntax : remove expiry from key\n> PERSIST key\n\n# example\n> PERSIST lastname\n\n#------------\n# syntax : find (remaining) time to live of a key\n> TTL key\n\n# example\n> TTL lastname\n\n#------------\n# syntax : increment a number\n> INCR key\n\n# example\n> INCR counter\n\n#------------\n# syntax : decrement a number\n> DECR key\n\n# example\n> DECR counter\n")),(0,r.kt)("p",null,"Detailed CLI instructions can be viewed ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/manual/cli/"},"here")," and\ncommands can be checked ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/commands/"},"here")))}y.isMDXComponent=!0;const N={toc:[{value:"Useful Resources",id:"useful-resources",level:3}]};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Redis Stack enables the JSON data type in Redis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# syntax : set an object value to a key\n> JSON.SET objKey $ value\n\n# example\n> JSON.SET person $ \'{"name":"Leonard Cohen","dob":1478476800,"isActive": true, "hobbies":["music", "cricket"]}\'\n\n#------------\n# syntax : get object value of a key\n> JSON.GET objKey $\n\n# example\n> JSON.GET person $\n\n#------------\n# syntax : find object key length\n> JSON.OBJLEN objKey $\n\n# example\n> JSON.OBJLEN person $\n\n#------------\n# syntax : find object keys\n> JSON.OBJKEYS objKey $\n\n# example\n> JSON.OBJKEYS person $\n\n#------------\n# syntax : update nested property\n> JSON.SET objKey $.prop value\n\n# example\n> JSON.SET person $.name \'"Alex"\'\n\n#------------\n# syntax : update nested array\n> JSON.SET objKey $.arrayProp fullValue\n> JSON.SET objKey $.arrayProp[index] value\n\n# example\n> JSON.SET person $.hobbies \'["music", "cricket"]\'\n> JSON.SET person $.hobbies[1] \'"dance"\'\n\n#------------\n# syntax : remove nested array item by index\n> JSON.ARRPOP objKey $.arrayProp index\n\n# example\n> JSON.ARRPOP person $.hobbies 1\n')),(0,r.kt)("p",null,"More details can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/stack/json/"},"Redis Stack docs")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Redis Stack enables a query and indexing engine for Redis, providing secondary indexing, full-text search and aggregations capabilities."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have to create index on schema to be able to search on its data")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# syntax\n> FT.CREATE {index_name} ON JSON PREFIX {count} {prefix} SCHEMA {json_path} AS {attribute} {type}\n# NOTE: attribute = logical name,  json_path = JSONPath expressions\n\n# example\n> FT.CREATE userIdx ON JSON PREFIX 1 users: SCHEMA $.user.name AS name TEXT $.user.hobbies AS hobbies TAG $.user.age as age NUMERIC\n# NOTE: You can search by any attribute mentioned in the above index for keys that start with users: (e.g. users:1).\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"More details on Indexing JSON can be found ",(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/search/indexing_json/"},"here"))),(0,r.kt)("p",null,"Once index is created, any pre-existing/ new/ modified JSON document is automatically indexed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'//sample json document\n{\n  "user": {\n    "name": "John Smith",\n    "hobbies": "foo,bar",\n    "age": 23\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# adding JSON document\n> JSON.SET myDoc $ \'{"user":{"name":"John Smith","hobbies":"foo,bar","age":23}}\'\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Search")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# search all user documents with name \'John\'\n> FT.SEARCH userIdx \'@name:(John)\'\n1) (integer) 1\n2) "myDoc"\n3) 1) "$"\n   2)  {"user":{"name":"John Smith","hobbies":"foo,bar","age":23}}"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Search & project required fields")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# search documents with name \'John\' & project only age field\n> FT.SEARCH userIdx \'@name:(John)\' RETURN 1 $.user.age\n1) (integer) 1\n2) "myDoc"\n3) 1) "$.user.age"\n   2) "23"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# project multiple fields\n> FT.SEARCH userIdx \'@name:(John)\' RETURN 2 $.user.age $.user.name\n1) (integer) 1\n2) "myDoc"\n3) 1) "$.user.age"\n   2) "23"\n   3) "$.user.name"\n   4) "John Smith"\n\n#------------\n# project with alias name\n> FT.SEARCH userIdx \'@name:(John)\' RETURN 3 $.user.age AS userAge\n\n1) (integer) 1\n2) "myDoc"\n3) 1) "userAge"\n   2) "23"\n#------------\n\n# multi field query\n> FT.SEARCH userIdx \'@name:(John) @hobbies:{foo | me} @age:[20 30]\'\n1) (integer) 1\n2) "myDoc"\n3) 1) "$"\n   2)  {"user":{"name":"John Smith","hobbies":"foo,bar","age":23}}"\n')),(0,r.kt)("p",null,"More details on ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/stack/search/reference/query_syntax/"},"query syntax")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drop index")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"> FT.DROPINDEX userIdx\n")),(0,r.kt)("h3",{id:"useful-resources"},"Useful Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=I-ohlZXXaxs"},"Redis and JSON explained (Revisited in 2022)")," video"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/search/"},"Searching with Redis Stack")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru204/"},"Redis University 204, Storing, Querying, and Indexing JSON at Speed"))))}f.isMDXComponent=!0;const b={toc:[{value:"Additional Resources",id:"additional-resources",level:3}]};function v(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install redis in the project\nnpm install redis --save\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//create client & connect to redis\n\nimport { createClient } from 'redis';\n\nconst client = createClient({\n  //redis[s]://[[username][:password]@][host][:port][/db-number]\n  url: 'redis://alice:foobared@awesome.redis.server:6380',\n});\n\nclient.on('error', (err) => console.log('Redis Client Error', err));\n\nawait client.connect();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Check specific keys\nconst pattern = '*';\nawait client.keys(pattern);\n\n//------------\n// Check number of keys in database\nawait client.dbsize();\n\n//------------\n// set key value\nawait client.set('key', 'value');\nawait client.set('key', 'value', {\n  EX: 10,\n  NX: true,\n});\n\n//------------\n// get value by key\nconst value = await client.get('key');\n\n//------------\n//syntax : delete keys\nawait client.del('key');\nconst keyArr = ['key1', 'key2', 'key3'];\nawait client.del(...keyArr);\n\n//------------\n// Check if key exists\nawait client.exists('key');\n\n//------------\n// set expiry to key\nconst expireInSeconds = 30;\nawait client.expire('key', expireInSeconds);\n\n//------------\n// remove expiry from key\nawait client.persist('key');\n\n//------------\n// find (remaining) time to live of a key\nawait client.ttl('key');\n\n//------------\n// increment a number\nawait client.incr('key');\n\n//------------\n// decrement a number\nawait client.decr('key');\n\n//------------\n// use the method below to execute commands directly\nawait client.sendCommand(['SET', 'key', 'value']);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//graceful disconnecting\nawait client.quit();\n\n//forceful disconnecting\nawait client.disconnect();\n")),(0,r.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"node-redis Github repo")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/develop/node/node-crash-course"},"Node.js Redis Crash Course")),(0,r.kt)("li",{parentName:"ol"},"JavaScript/NodeJS apps on the ",(0,r.kt)("a",{parentName:"li",href:"https://launchpad.redis.com/"},"Redis Launchpad"))))}v.isMDXComponent=!0;const x={toc:[{value:"Useful Resources",id:"useful-resources",level:3}]};function w(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following example uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-om-node"},"Redis OM Node"),", but you can also use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis/node-redis"},"Node Redis"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/luin/ioredis"},"IO Redis"),", or any other supported ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/resources/clients/"},"client")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install RedisOM in the project\nnpm install redis-om --save\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create RedisOM Client & connect to redis")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//client.js file\n\nimport { Client } from 'redis-om';\n\n// pulls the Redis URL from .env\nconst url = process.env.REDIS_URL;\n\nconst client = new Client();\nawait client.open(url);\n\nexport default client;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create Entity, Schema & Repository")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"//person.js file\n\nimport { Entity, Schema } from 'redis-om';\nimport client from './client.js';\n\nclass Person extends Entity {}\n\nconst personSchema = new Schema(Person, {\n  firstName: { type: 'string' },\n  lastName: { type: 'string' },\n  age: { type: 'number' },\n  verified: { type: 'boolean' },\n  location: { type: 'point' },\n  locationUpdated: { type: 'date' },\n  skills: { type: 'string[]' },\n  personalStatement: { type: 'text' },\n});\n\nexport const personRepository = client.fetchRepository(personSchema);\n\n//creating index to make person schema searchable\nawait personRepository.createIndex();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { personRepository } from 'person.js';\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Insert example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const input = {\n  firstName: 'Rupert',\n  lastName: 'Holmes',\n  age: 75,\n  verified: false,\n  location: {\n    longitude: 45.678,\n    latitude: 45.678,\n  },\n  locationUpdated: '2022-03-01T12:34:56.123Z',\n  skills: ['singing', 'songwriting', 'playwriting'],\n  personalStatement: 'I like pi\xf1a coladas and walks in the rain',\n};\nlet person = await personRepository.createAndSave(input);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const id = person.entityId;\nperson = await personRepository.fetch(id);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person = await personRepository.fetch(id);\n\nperson.firstName = 'Alex';\n\n//null to remove that field\nperson.lastName = null;\n\nawait personRepository.save(person);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update location sample")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const longitude = 45.678;\nconst latitude = 45.678;\nconst locationUpdated = new Date();\n\nconst person = await personRepository.fetch(id);\nperson.location = { longitude, latitude };\nperson.locationUpdated = locationUpdated;\nawait personRepository.save(person);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Search examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Get all person records\nconst queryBuilder = personRepository.search();\nconst people = await queryBuilder.return.all();\n\n// Multiple AND conditions example\nconst queryBuilder = personRepository\n  .search()\n  .where('verified')\n  .eq(true) // ==\n  .and('age')\n  .gte(21) // >=\n  .and('lastName')\n  .eq(lastName);\n//console.log(queryBuilder.query);\nconst people = await queryBuilder.return.all();\n\n// Multiple OR conditions example\nconst queryBuilder = personRepository\n  .search()\n  .where('verified')\n  .eq(true)\n  .or((search) => search.where('age').gte(21).and('lastName').eq(lastName))\n  .sortAscending('age');\nconst people = await queryBuilder.return.all();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Delete example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await personRepository.remove(id);\n")),(0,r.kt)("h3",{id:"useful-resources"},"Useful Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Github repo")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/get-started/tutorials/stack-node/"},"Getting started docs")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=KUfufrwpBkM"},"Getting started video"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis-developer/express-redis-om-workshop"},"Source code"))))))}w.isMDXComponent=!0;const S={toc:[{value:"Additional Resources",id:"additional-resources",level:3}]};function R(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},S,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install redis in the project\npip install redis\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import redis\n\npool = redis.ConnectionPool(host='localhost', port=6379, db=0)\nr = redis.Redis(connection_pool=pool)\n\n# Check specific keys\nr.keys('*')\n\n#------------\n# Check number of keys in database\nr.dbsize()\n\n#------------\n# set key value\nr.set('key', 'value')\nr.set('key', 'value', ex=10, nx=True)\n\n#------------\n# get value by key\nvalue = r.get('key')\n\n#------------\n# syntax : delete keys\nr.delete('key')\nr.delete('key1', 'key2', 'key3')\n\n#------------\n# Check if key exists\nr.exists('key')\n\n#------------\n# set expiry to key\nexpireInSeconds = 30\nr.expire('key', expireInSeconds)\n\n#------------\n# remove expiry from key\nr.persist('key')\n\n#------------\n# find (remaining) time to live of a key\nr.ttl('key')\n\n#------------\n# increment a number\nr.incr('key')\n\n#------------\n# decrement a number\nr.decr('key')\n\n#------------\n# use the method below to execute commands directly\nr.execute_command('SET', 'key', 'value')\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For more information, checkout the")),(0,r.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-py"},"redis-py Github repo")),(0,r.kt)("li",{parentName:"ol"},"Python apps on the ",(0,r.kt)("a",{parentName:"li",href:"https://launchpad.redis.com/"},"Redis Launchpad"))))}R.isMDXComponent=!0;const T={toc:[{value:"Useful Resources",id:"useful-resources",level:3}]};function E(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},T,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following example uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-om-python"},"Redis OM Python"),", but you can also use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-py"},"redis-py")," or any other supported ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/resources/clients/"},"client")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install Redis OM in the project\npip install redis-om\n")),(0,r.kt)("p",null,"Create a JSON model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import datetime\nimport dateutil.parser\nfrom typing import List, Optional\n\nfrom redis_om import (\n    EmbeddedJsonModel,\n    JsonModel,\n    Field,\n    Migrator,\n)\n\nclass Point(EmbeddedJsonModel):\n    longitude: float = Field(index=True)\n    latitude: float = Field(index=True)\n\n\nclass Person(JsonModel):\n    first_name: str = Field(index=True)\n    last_name: Optional[str] = Field(index=True)\n    age: int = Field(index=True)\n    verified: bool\n    location: Point\n    location_updated: datetime.datetime = Field(index=True)\n    skills: List[str]\n    personal_statement: str = Field(index=True, full_text_search=True)\n\n\n# Before running queries, we need to run migrations to set up the\n# indexes that Redis OM will use. You can also use the `migrate`\n# CLI tool for this!\nMigrator().run()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Insert example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'person = Person(**{\n    "first_name": "Rupert",\n    "last_name": "Holmes",\n    "age": 75,\n    "verified": False,\n    "location": {\n        "longitude": 45.678,\n        "latitude": 45.678\n    },\n    "location_updated": dateutil.parser.isoparse("2022-03-01T12:34:56.123Z"),\n    "skills":  ["singing", "songwriting", "playwriting"],\n    "personal_statement": "I like pi\xf1a coladas and walks in the rain"\n}).save()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"id = person.pk\nperson = Person.get(id)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'person = Person.get(id)\nperson.first_name = "Alex"\nperson.last_name = None\nperson.save()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update embedded JSON example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"person = Person.get(id)\nperson.location = Point(longitude=44.678, latitude=44.678)\nperson.location_updated = datetime.datetime.now()\nperson.save()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Search examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Get all Person records\n\nall = Person.find().all()\n\n# Multiple AND conditions example\n\npeople = Person.find(\n    (Person.age > 21) &\n    (Person.first_name == "Alex")\n).all()\n\n# Multiple OR conditions example\n\npeople = Person.find(\n    (Person.age > 75) |\n    (Person.first_name == "Alex")\n).all()\n\n# Multiple AND + OR conditions example\n\npeople = Person.find(\n    ((Person.age > 21) &\n     (Person.first_name == "Alex")) &\n    ((Person.age > 75) |\n     (Person.first_name == "Alex"))\n).all()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Delete example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Person.get(id).delete()\n")),(0,r.kt)("h3",{id:"useful-resources"},"Useful Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-python"},"Github repo")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/get-started/tutorials/stack-python/"},"Getting started docs")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=PPT1FElAS84"},"Getting started video"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis-developer/redis-om-python-flask-skeleton-app"},"Source code"))))))}E.isMDXComponent=!0;const O={toc:[{value:"Additional Resources",id:"additional-resources",level:3}]};function C(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},O,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The .NET Community has built many ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/clients#c-sharp"},"client libraries")," to help handle requests to Redis Server. In this guide, we'll mostly be concerned with using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/StackExchange/StackExchange.Redis"},"StackExchange.Redis")," client library. As the name implies the StackExchange client is developed by StackExchange for use on popular websites like ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/"},"StackOverflow"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install redis in the project\ndotnet add package StackExchange.Redis\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// Impport the required namespace\nusing StackExchange.Redis;\n\n// Initialize the connection\nstatic readonly ConnectionMultiplexer _redis = ConnectionMultiplexer.Connect("localhost:6379");\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var redis = _redis.GetDatabase();\n\n// Check specific keys\nvar server = _redis.GetServer(_redis.GetEndPoints()[0]);\nserver.Keys(pattern: "*");\n\n//------------\n// Check number of keys in database\nserver.DatabaseSize();\n\n//------------\n// set key value\nredis.StringSet("key", "value");\nredis.StringSet("key", "value", expiry: TimeSpan.FromSeconds(10), when: When.NotExists);\n\n//------------\n// get value by key\nvar value = redis.StringGet("key");\n\n//------------\n// syntax : delete keys\nredis.KeyDelete("key");\nredis.KeyDelete(new RedisKey[] { "key1", "key2", "key3"});\n\n//------------\n// Check if key exists\nredis.KeyExists("key");\n\n//------------\n// set expiry to key\nredis.KeyExpire("key", DateTime.Now.AddSeconds(30));\n\n//------------\n// remove expiry from key\nredis.KeyPersist("key");\n\n\n//------------\n// find (remaining) time to live of a key\nredis.KeyTimeToLive("key");\n\n\n//------------\n// increment a number\nredis.StringIncrement("key");\n\n\n//------------\n// decrement a number\nredis.StringDecrement("key");\n\n\n//------------\n// use the method below to execute commands directly\nredis.Execute("SET", "key", "value");\n')),(0,r.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/StackExchange/StackExchange.Redis"},"StackExchange.Redis Github repo")),(0,r.kt)("li",{parentName:"ol"},"C# apps on the ",(0,r.kt)("a",{parentName:"li",href:"https://launchpad.redis.com/"},"Redis Launchpad"))))}C.isMDXComponent=!0;const I={toc:[{value:"Useful Resources",id:"useful-resources",level:3}]};function D(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},I,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following example uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-om-dotnet"},"Redis OM .NET"),", but you can also use any other supported ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/resources/clients/"},"client"),". The examples also use the synchronous methods of Redis OM .NET, but it is recommended that you use the asynchronous methods in a production application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install Redis OM in the project\ndotnet add package Redis.OM\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a JSON model")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Model.cs"',title:'"Model.cs"'},'using Redis.OM.Modeling;\n\nnamespace RedisApp.Model\n{\n    [Document(StorageType = StorageType.Json, Prefixes = new[] { "Person" })]\n    public class Person\n    {\n        [RedisIdField]\n        public string Id { get; set; }\n\n        [Indexed]\n        public string FirstName { get; set; }\n\n        [Indexed]\n        public string? LastName { get; set; }\n\n        [Indexed(Sortable = true)]\n        public int Age { get; set; }\n\n        [Indexed]\n        public bool Verified { get; set; }\n\n        [Indexed]\n        public GeoLoc Location { get; set; }\n\n        [Indexed]\n        public string[] Skills { get; set; } = Array.Empty<string>();\n\n        [Searchable]\n        public string PersonalStatement { get; set; }\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setup your main program")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},"using System;\nusing System.Linq;\nusing Redis.OM;\nusing Redis.OM.Modeling;\nusing RedisApp.Model;\n\nnamespace RedisApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n        }\n    }\n}\n")),(0,r.kt)("p",null,"The rest of the code will be inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"Main"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create your provider used to call into Redis")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var provider = new RedisConnectionProvider("redis://localhost:6379");\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Conditionally create index necessary for searching")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var info = provider.Connection.Execute("FT._LIST").ToArray().Select(x => x.ToString());\n\nif (info.All(x => x != "person-idx"))\n{\n    provider.Connection.CreateIndex(typeof(Person));\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initialize your collection")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var people = provider.RedisCollection<Person>();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Insert example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var person = new Person\n{\n    FirstName = "Rupert",\n    LastName = "Holmes",\n    Age = 75,\n    Verified = false,\n    Location = new GeoLoc { Longitude = 45.678, Latitude = 45.678 },\n    Skills = new string[] { "singing", "songwriting", "playwriting" },\n    PersonalStatement = "I like pi\xf1a coladas and walks in the rain"\n};\n\nvar id = people.Insert(person);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"person = people.FindById(id);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'person = people.FindById(id);\nperson.FirstName = "Alex";\nperson.LastName = null;\npeople.Update(person);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update location example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"person = people.FindById(id);\nperson.Location = new GeoLoc { Longitude = 44.678, Latitude = 44.678 };\npeople.Update(person);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Search examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// Multiple AND conditions example\npeople.Where(p => p.Age > 21 && p.FirstName == "Alex").ToList();\n\n// Multiple OR conditions example\npeople.Where(p => p.Age > 75 || p.FirstName == "Alex").ToList();\n\n// Multiple AND + OR conditions example\npeople.Where(p =>\n            (p.Age > 21 && p.FirstName == "Alex") &&\n            (p.Age > 75 || p.FirstName == "Alex")\n).ToList();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Delete example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"person = people.FindById(id);\npeople.Delete(person);\n")),(0,r.kt)("h3",{id:"useful-resources"},"Useful Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-dotnet"},"Github repo")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/get-started/tutorials/stack-dotnet/"},"Getting started docs")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=ZHPXKrJCYNA"},"Getting started video"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redis-developer/redis-om-dotnet-skeleton-app"},"Source code"))))))}D.isMDXComponent=!0;const A={id:"index-quick-start",title:"Getting Started",sidebar_label:"Getting Started",slug:"/howtos/quick-start",authors:["prasan","will"]},M=void 0,P={unversionedId:"howtos/quick-start/index-quick-start",id:"howtos/quick-start/index-quick-start",title:"Getting Started",description:"Welcome to the getting started for the official Redis Developer Hub!",source:"@site/docs/howtos/quick-start/index-quick-start.mdx",sourceDirName:"howtos/quick-start",slug:"/howtos/quick-start",permalink:"/howtos/quick-start",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/index-quick-start.mdx",tags:[],version:"current",lastUpdatedAt:1700152680,formattedLastUpdatedAt:"Nov 16, 2023",frontMatter:{id:"index-quick-start",title:"Getting Started",sidebar_label:"Getting Started",slug:"/howtos/quick-start",authors:["prasan","will"]},sidebar:"docs",next:{title:"Overview - All Quick Starts",permalink:"/create"}},L={},_=[{value:"Setup Redis",id:"setup-redis",level:2},{value:"Basic Querying with Redis",id:"basic-querying-with-redis",level:2},{value:"Secondary Indexing and Searching with Redis",id:"secondary-indexing-and-searching-with-redis",level:2},{value:"Sync Redis with Other Databases",id:"sync-redis-with-other-databases",level:2},{value:"Additional Resources For Syncing with Redis and Other Databases",id:"additional-resources-for-syncing-with-redis-and-other-databases",level:3},{value:"Probabilistic Data and Queries with Redis",id:"probabilistic-data-and-queries-with-redis",level:2},{value:"TimeSeries Data and Queries with Redis",id:"timeseries-data-and-queries-with-redis",level:2},{value:"Additional Resources",id:"additional-resources",level:2}],J={toc:_};function j(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},J,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{frontMatter:A,mdxType:"Authors"}),(0,r.kt)("div",{class:"cst-tabs-page"},(0,r.kt)("p",null,"Welcome to the getting started for the official Redis Developer Hub!"),(0,r.kt)("p",null,"If you are new to Redis, we recommend starting with ",(0,r.kt)("a",{parentName:"p",href:"https://university.redis.com/courses/ru101/"},"Redis University (RU101)"),". RU101 is an introductory course, perfect for developers new to Redis. In this course, you\u2019ll learn about the data structures in Redis, and you\u2019ll see how to practically apply them in the real world."),(0,r.kt)("p",null,"If you have questions related to Redis, come join the ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/redis"},"Redis Discord server"),". Our Discord server is a place where you can learn, share, and collaborate about anything and everything Redis. Connect with users from the community and Redis University. Get your questions answered and learn cool new tips and tricks! Watch for notifications of the latest content from Redis and the community. And share your own content with the community."),(0,r.kt)("h2",{id:"setup-redis"},"Setup Redis"),(0,r.kt)("p",null,"There are essentially two ways you can use Redis:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cloud Redis"),": A hosted and serverless Redis database-as-a-service (DBaaS). The fastest way to deploy Redis Cloud via Amazon AWS, Google Cloud Platform, or Microsoft Azure.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.com/try-free"},"Getting Started")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PL83Wfqi-zYZG6uGxBagsbqjpsi2XBEj1K"},"Videos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.com/try-free"},"Free Sign-up")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"On-prem/local Redis"),": Self-managed Redis using your own server and any operating system (Mac OS, Windows, or Linux).")),(0,r.kt)("p",null,"If you choose to use local Redis we strongly recommend using Docker. If you choose not to use Docker, use the following instructions based on your OS:"),(0,r.kt)(s.Z,{defaultValue:"DOCKER",groupId:"OS",values:[{label:"Docker",value:"DOCKER"},{label:"Linux",value:"LINUX"},{label:"Windows",value:"WINDOWS"},{label:"Mac OS",value:"MAC_OS"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"DOCKER",mdxType:"TabItem"},(0,r.kt)(p,{mdxType:"DockerSetup"})),(0,r.kt)(l.Z,{value:"LINUX",mdxType:"TabItem"},(0,r.kt)(u,{mdxType:"LinuxSetup"})),(0,r.kt)(l.Z,{value:"WINDOWS",mdxType:"TabItem"},(0,r.kt)(h,{mdxType:"WindowsSetup"})),(0,r.kt)(l.Z,{value:"MAC_OS",mdxType:"TabItem"},(0,r.kt)(m,{mdxType:"MacOsSetup"}))),(0,r.kt)("h2",{id:"basic-querying-with-redis"},"Basic Querying with Redis"),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"language",values:[{label:"CLI",value:"CLI"},{label:"JavaScript",value:"JS"},{label:"Python",value:"PYTHON"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)(y,{mdxType:"CliBasicQuerying"})),(0,r.kt)(l.Z,{value:"JS",mdxType:"TabItem"},(0,r.kt)(v,{mdxType:"NodeBasicQuerying"})),(0,r.kt)(l.Z,{value:"PYTHON",mdxType:"TabItem"},(0,r.kt)(R,{mdxType:"PythonBasicQuerying"})),(0,r.kt)(l.Z,{value:"C#",mdxType:"TabItem"},(0,r.kt)(C,{mdxType:"CSharpBasicQuerying"}))),(0,r.kt)("h2",{id:"secondary-indexing-and-searching-with-redis"},"Secondary Indexing and Searching with Redis"),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"language",values:[{label:"CLI",value:"CLI"},{label:"JavaScript",value:"JS"},{label:"Python",value:"PYTHON"},{label:"C#",value:"C#"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)(f,{mdxType:"CliSecondaryIndexing"})),(0,r.kt)(l.Z,{value:"JS",mdxType:"TabItem"},(0,r.kt)(w,{mdxType:"NodeSecondaryIndexing"})),(0,r.kt)(l.Z,{value:"PYTHON",mdxType:"TabItem"},(0,r.kt)(E,{mdxType:"PythonSecondaryIndexing"})),(0,r.kt)(l.Z,{value:"C#",mdxType:"TabItem"},(0,r.kt)(D,{mdxType:"CSharpSecondaryIndexing"}))),(0,r.kt)("h2",{id:"sync-redis-with-other-databases"},"Sync Redis with Other Databases"),(0,r.kt)("p",null,"RedisGears adds a dynamic execution framework for your Redis data that enables you to write and execute functions that implement data flows in Redis."),(0,r.kt)("p",null,"Consider following example to sync data with MongoDB."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create the below python file and update the MongoDB connection details, database, collection and primary key name to be synced")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="write-behind.py"',title:'"write-behind.py"'},"# Gears Recipe for a single write behind\n\n# import redis gears & mongo db libs\nfrom rgsync import RGJSONWriteBehind, RGJSONWriteThrough\nfrom rgsync.Connectors import MongoConnector, MongoConnection\n\n# change mongodb connection\nconnection = MongoConnection(\"\", \"\", \"\", \"\", \"ENV_MONGODB_CONNECTION_URL\")\n\n# change MongoDB database\ndb = 'ENV_DB_NAME'\n\n# change MongoDB collection & it's primary key\ncollection1Connector = MongoConnector(connection, db, 'ENV_COLLECTION1_NAME', 'ENV_COLLECTION1_PRIMARY_KEY')\n\n# change redis keys with prefix that must be synced with mongodb collection\nRGJSONWriteBehind(GB,  keysPrefix='ENV_COLLECTION1_PREFIX_KEY',\n                  connector=collection1Connector, name='Collection1WriteBehind',\n                  version='99.99.99')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-env"},"ENV_MONGODB_CONNECTION_URL=mongodb://usrAdmin:passwordAdmin@10.10.20.2:27017/dbSpeedMernDemo?authSource=admin\nENV_DB_NAME=dbSpeedMernDemo\nENV_COLLECTION1_NAME=movies\nENV_COLLECTION1_PRIMARY_KEY=movieId\nENV_COLLECTION1_PREFIX_KEY=movie\n")),(0,r.kt)("p",null,'The code above demonstrates how you would sync a "movies" collection in MongoDB with Redis using the "movie" key prefix.'),(0,r.kt)("p",null,"To get this working you first need to load the python file into redis-server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ redis-cli rg.pyexecute "`cat write-behind.py`" REQUIREMENTS rgsync pymongo==3.12.0\n')),(0,r.kt)("p",null,'Now, insert a JSON item in to Redis starting with the prefix specified in the python file (i.e. "movie"):'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# redis-cli command\n> JSON.SET movie:123 $ \'{"movieId":123,"name":"RRR","isActive": true}\'\n')),(0,r.kt)("p",null,"Now, verify whether the JSON is inserted into MongoDB."),(0,r.kt)("h3",{id:"additional-resources-for-syncing-with-redis-and-other-databases"},"Additional Resources For Syncing with Redis and Other Databases"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/RedisGears/rgsync/tree/master/examples/mongo"},"Redis gear sync with MongoDB")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://oss.redis.com/redisgears/commands.html#rgpyexecute"},"RG.PYEXECUTE")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/RedisGears/rgsync#running-the-recipe"},"rgsync")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/RedisGears/gears-cli"},"gears-cli"))),(0,r.kt)("h2",{id:"probabilistic-data-and-queries-with-redis"},"Probabilistic Data and Queries with Redis"),(0,r.kt)("p",null,"Redis Stack supports probabilistic datatypes and queries. Below you will find a stock leaderboard example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# Reserve a new leaderboard filter\n> TOPK.RESERVE trending-stocks 12 50 4 0.9\n"OK"\n\n# Add a new entries to the leaderboard\n> TOPK.ADD trending-stocks AAPL AMD MSFT INTC GOOG FB NFLX GME AMC TSLA\n1) "null" ...\n\n# Get the leaderboard\n> TOPK.LIST trending-stocks\n1) "AAPL"\n2) "AMD"\n2) "MSFT" ...\n\n# Get information about the leaderboard\n> TOPK.INFO trending-stocks\n1) "k"\n2) "12"\n3) "width"\n4) "50"\n5) "depth"\n6) "4"\n7) "decay"\n8) "0.90000000000000002"\n')),(0,r.kt)("p",null,"More details in ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/stack/bloom/"},"docs")),(0,r.kt)("h2",{id:"timeseries-data-and-queries-with-redis"},"TimeSeries Data and Queries with Redis"),(0,r.kt)("p",null,"Redis Stack supports time-series use cases such as IoT, stock prices, and telemetry. You can ingest and query millions of samples and events at the speed of Redis. You can also use a variety of queries for visualization and monitoring with built-in connectors to popular tools like Grafana, Prometheus, and Telegraf."),(0,r.kt)("p",null,"The following example demonstrates how you might store temperature sensor readings in Redis Stack:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# Create new time-series, for example temperature readings\n> TS.CREATE temperature:raw DUPLICATE_POLICY LAST\n"OK"\n\n# Create a bucket for monthly aggregation\n> TS.CREATE temperature:monthly DUPLICATE_POLICY LAST\n"OK"\n\n# Automatically aggregate based on time-weighted average\n> TS.CREATERULE temperature:raw temperature:monthly AGGREGATION twa 2629800000\n"OK"\n\n# Add data to the raw time-series\n> TS.MADD temperature:raw 1621666800000 52 ...\n1) "1621666800000" ...\n\n# View the monthly time-weighted average temperatures\n> TS.RANGE temperature:monthly 0 +\n1) 1) "1621666800000"\n   2) "52" ...\n\n# Delete compaction rule\n> TS.DELETERULE temperature:raw temperature:monthly\n"OK"\n\n# Delete partial time-series\n> TS.DEL temperature:raw 0 1621666800000\n(integer) 1\n')),(0,r.kt)("p",null,"More details in ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/stack/timeseries/"},"docs")),(0,r.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Join the ",(0,r.kt)("a",{parentName:"li",href:"/community/"},"community")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")))))}j.isMDXComponent=!0},62968:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/redis-insight-4465fb84b04927d733117d9f581c6339.svg"}}]);