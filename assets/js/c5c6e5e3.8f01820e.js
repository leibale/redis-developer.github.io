"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[6470,5653,7644,6045,8454],{3905:(e,t,s)=>{s.d(t,{Zo:()=>l,kt:()=>u});var i=s(67294);function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,i)}return s}function r(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){o(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function n(e,t){if(null==e)return{};var s,i,o=function(e,t){if(null==e)return{};var s,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)s=a[i],t.indexOf(s)>=0||(o[s]=e[s]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)s=a[i],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(o[s]=e[s])}return o}var c=i.createContext({}),d=function(e){var t=i.useContext(c),s=t;return e&&(s="function"==typeof e?e(t):r(r({},t),e)),s},l=function(e){var t=d(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var s=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=n(e,["components","mdxType","originalType","parentName"]),m=d(s),u=o,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||a;return s?i.createElement(h,r(r({ref:t},l),{},{components:s})):i.createElement(h,r({ref:t},l))}));function u(e,t){var s=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=s.length,r=new Array(a);r[0]=m;var n={};for(var c in t)hasOwnProperty.call(t,c)&&(n[c]=t[c]);n.originalType=e,n.mdxType="string"==typeof e?e:o,r[1]=n;for(var d=2;d<a;d++)r[d]=s[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,s)}m.displayName="MDXCreateElement"},50358:(e,t,s)=>{s.d(t,{Z:()=>c});var i=s(67294),o=s(52263);const a="authorByline_VoxI",r="authorLabel_a70t",n="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:s}=(0,o.Z)(),c=s.customFields.authors;return i.createElement(i.Fragment,null,t.authors&&i.createElement("div",{className:"docAuthors"},i.createElement("hr",null),t.authors.map((e=>i.createElement("div",{key:e,className:a},i.createElement("img",{className:n,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),i.createElement("div",null,i.createElement("div",{className:r},"Author:"),i.createElement("div",null,i.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),i.createElement("hr",null)))}},78824:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>g,frontMatter:()=>d,metadata:()=>p,toc:()=>u});var i=s(87462),o=(s(67294),s(3905)),a=s(50358),r=s(4975),n=s(34045),c=s(31788);s(71673);const d={id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/microservices/api-gateway-caching",authors:["prasan","will"]},l=void 0,p={unversionedId:"howtos/solutions/microservices/api-gateway-caching/index-solutions-api-gateway-caching",id:"howtos/solutions/microservices/api-gateway-caching/index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",description:"What is API gateway caching?",source:"@site/docs/howtos/solutions/microservices/api-gateway-caching/index-api-gateway-caching.mdx",sourceDirName:"howtos/solutions/microservices/api-gateway-caching",slug:"/howtos/solutions/microservices/api-gateway-caching",permalink:"/howtos/solutions/microservices/api-gateway-caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/api-gateway-caching/index-api-gateway-caching.mdx",tags:[],version:"current",lastUpdatedAt:1700152680,formattedLastUpdatedAt:"Nov 16, 2023",frontMatter:{id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/microservices/api-gateway-caching",authors:["prasan","will"]},sidebar:"docs",previous:{title:"How to use Redis for Query Caching",permalink:"/howtos/solutions/microservices/caching"},next:{title:"Redis for Digital Identity Validation",permalink:"/howtos/solutions/fraud-detection/digital-identity-validation"}},m={},u=[{value:"What is API gateway caching?",id:"what-is-api-gateway-caching",level:2},{value:"Why you should use Redis for API gateway caching",id:"why-you-should-use-redis-for-api-gateway-caching",level:2},{value:"Microservices architecture for an e-commerce application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce application frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"API gateway caching in a microservices application with Redis",id:"api-gateway-caching-in-a-microservices-application-with-redis",level:2},{value:"Ready to use Redis for API gateway caching ?",id:"ready-to-use-redis-for-api-gateway-caching-",level:2},{value:"Additional resources",id:"additional-resources",level:3}],h={toc:u};function g(e){let{components:t,...l}=e;return(0,o.kt)("wrapper",(0,i.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(a.Z,{frontMatter:d,mdxType:"Authors"}),(0,o.kt)(c.default,{mdxType:"SourceCode"}),(0,o.kt)("h2",{id:"what-is-api-gateway-caching"},"What is API gateway caching?"),(0,o.kt)("p",null,"So you're building a microservices application. But you find yourself struggling with ways to handle authentication that let you reuse code and maximize performance. Typically for authentication you might use sessions, OAuth, authorization tokens, etc. For the purposes of this tutorial, let's assume we're using an authorization token. In a monolithic application, authentication is pretty straightforward:"),(0,o.kt)("p",null,"When a request comes in:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Decode the ",(0,o.kt)("inlineCode",{parentName:"li"},"Authorization")," header."),(0,o.kt)("li",{parentName:"ol"},"Validate the credentials."),(0,o.kt)("li",{parentName:"ol"},"Store the session information on the request object or cache for further use down the line by the application.")),(0,o.kt)("p",null,"However, you might be puzzled by how to do this with microservices. Ordinarily, in a microservices application an API gateway serves as the single entry point for clients, which routes traffic to the appropriate services. Depending on the nature of the request, those services may or may not require a user to be authenticated. You might think it's a good idea to handle authentication in each respective service."),(0,o.kt)("p",null,"While this works, you end up with a fair amount of duplicated code. Plus, it's difficult to understand when and where slowdowns happen and to scale services appropriately, because you repeat some of the same work in each service. A more effective way to handle authentication is to deal with it at the API gateway layer, and then pass the session information down to each service."),(0,o.kt)("p",null,"Once you decide to handle authentication at the API gateway layer, you must decide where to store sessions."),(0,o.kt)("p",null,"Imagine you're building an e-commerce application that uses MongoDB/ any relational database as the primary data store. You could store sessions in primary database, but think about how many times the application needs to hit primary database to retrieve session information. If you have millions of customers, you don't want to go to database for every single request made to the API."),(0,o.kt)("p",null,"This is where Redis comes in."),(0,o.kt)("h2",{id:"why-you-should-use-redis-for-api-gateway-caching"},"Why you should use Redis for API gateway caching"),(0,o.kt)("p",null,"Redis is an in-memory datastore, which \u2013 among other things \u2013 makes it a perfect tool for caching session data. Redis allows you to reduce the load on a primary database while speeding up database reads. The rest of this tutorial covers how to accomplish this in the context of an e-commerce application."),(0,o.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices architecture for an e-commerce application"),(0,o.kt)(n.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,o.kt)("p",null,"The diagram illustrates how the API gateway uses Redis as a cache for session information. The API gateway gets the session from Redis and then passes it on to each microservice. This provides an easy way to handle sessions in a single place, and to permeate them throughout the rest of the microservices."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"API gateway caching with Redis architecture diagram",src:s(3931).Z,width:"1663",height:"1103"})),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use a ",(0,o.kt)("strong",{parentName:"p"},"Redis Cloud Cluster")," to get the benefit of linear scaling to ensure API calls perform under peak loads. That also provides 99.999% uptime and Active-Active geo-distribution, which prevents loss of authentication and session data.")),(0,o.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce application frontend using Next.js and Tailwind"),(0,o.kt)(r.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,o.kt)(c.default,{mdxType:"SourceCode"}),(0,o.kt)("h2",{id:"api-gateway-caching-in-a-microservices-application-with-redis"},"API gateway caching in a microservices application with Redis"),(0,o.kt)("p",null,"What's nice about a microservice architecture is that each service is set up so it can scale independently. Now, seeing as how each service might require authentication, you likely want to obtain session information for most requests. Therefore, it makes sense to use the API gateway to cache and retrieve session information and to subsequently pass the information on to each service. Let's see how you might accomplish this."),(0,o.kt)("p",null,"In our sample application, all requests are routed through the API gateway. We use ",(0,o.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," to set up the API gateway, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header to pass the authorization token from the frontend to the API. For every request, the API gateway gets the authorization token and looks it up in Redis. Then it passes it along to the correct microservice."),(0,o.kt)("p",null,"This code validates the session:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {\n  createProxyMiddleware,\n  responseInterceptor,\n} from 'http-proxy-middleware';\n\n//-----\nconst app: Express = express();\n\napp.use(cors());\napp.use(async (req, res, next) => {\n  const authorizationHeader = req.header('Authorization');\n  const sessionInfo = await getSessionInfo(authorizationHeader); //---- (1)\n\n  //add session info to request\n  if (sessionInfo?.sessionData && sessionInfo?.sessionId) {\n    req.session = sessionInfo?.sessionData;\n    req.sessionId = sessionInfo?.sessionId;\n  }\n  next();\n});\n\napp.use(\n  '/orders',\n  createProxyMiddleware({\n    // http://localhost:3000/orders/bar -> http://localhost:3001/orders/bar\n    target: 'http://localhost:3001',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      // pass session info to microservice\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n\napp.use(\n  '/orderHistory',\n  createProxyMiddleware({\n    target: 'http://localhost:3002',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      // pass session info to microservice\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n//-----\n\nconst getSessionInfo = async (authHeader?: string) => {\n  // (For demo purpose only) random userId and sessionId values are created for first time, then userId is fetched gainst that sessionId for future requests\n  let sessionId = '';\n  let sessionData: string | null = '';\n\n  if (!!authHeader) {\n    sessionId = authHeader.split(/\\s/)[1];\n  } else {\n    sessionId = 'SES_' + randomUUID(); // generate random new sessionId\n  }\n\n  const nodeRedisClient = getNodeRedisClient();\n  if (nodeRedisClient) {\n    const exists = await nodeRedisClient.exists(sessionId);\n    if (!exists) {\n      await nodeRedisClient.set(\n        sessionId,\n        JSON.stringify({ userId: 'USR_' + randomUUID() }),\n      ); // generate random new userId\n    }\n    sessionData = await nodeRedisClient.get(sessionId);\n  }\n\n  return {\n    sessionId: sessionId,\n    sessionData: sessionData,\n  };\n};\n\nconst applyAuthToResponse = responseInterceptor(\n  // adding sessionId to the response so that frontend can store it for future requests\n\n  async (responseBuffer, proxyRes, req, res) => {\n    // detect json responses\n    if (\n      !!proxyRes.headers['content-type'] &&\n      proxyRes.headers['content-type'].includes('application/json')\n    ) {\n      let data = JSON.parse(responseBuffer.toString('utf8'));\n\n      // manipulate JSON data here\n      if (!!(req as Request).sessionId) {\n        data = Object.assign({}, data, { auth: (req as Request).sessionId });\n      }\n\n      // return manipulated JSON\n      return JSON.stringify(data);\n    }\n\n    // return other content-types as-is\n    return responseBuffer;\n  },\n);\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This example is not meant to represent the best way to handle authentication. Instead, it illustrates what you might do with respect to Redis. You will likely have a different setup for authentication, but the concept of storing a session in Redis is similar.")),(0,o.kt)("p",null,"In the code above, we check for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header, otherwise we create a new one and store it in Redis. Then we retrieve the session from Redis. Further down the line we attach the session to the ",(0,o.kt)("inlineCode",{parentName:"p"},"x-session")," header prior to calling the orders service."),(0,o.kt)("p",null,"Now let's see how the orders service receives the session."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{9}","{9}":!0},"router.post(API_NAMES.CREATE_ORDER, async (req: Request, res: Response) => {\n  const body = req.body;\n  const result: IApiResponseBody = {\n    data: null,\n    error: null,\n  };\n\n  const sessionData = req.header('x-session');\n  const userId = sessionData ? JSON.parse(sessionData).userId : \"\";\n  ...\n});\n")),(0,o.kt)("p",null,"The highlighted line above shows how to pull the session out of the ",(0,o.kt)("inlineCode",{parentName:"p"},"x-session")," header and get the ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),"."),(0,o.kt)("h2",{id:"ready-to-use-redis-for-api-gateway-caching-"},"Ready to use Redis for API gateway caching ?"),(0,o.kt)("p",null,"That's all there is to it! You now know how to use Redis for API gateway caching. It's not complicated to get started, but this simple practice can help you scale as you build out microservices."),(0,o.kt)("p",null,"To learn more about Redis, check out the additional resources below:"),(0,o.kt)("h3",{id:"additional-resources"},"Additional resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Microservices with Redis",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/cqrs"},"CQRS")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/interservice-communication"},"Interservice communication")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/caching"},"Query caching")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/c/Redisinc"},"Redis YouTube channel")),(0,o.kt)("li",{parentName:"ul"},"Clients like ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"Node Redis")," and ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Redis om Node")," help you to use Redis in Node.js applications."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," : To view your Redis data or to play with raw Redis commands in the workbench"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redis.com/try-free/"},"Try Redis Cloud for free"))))}g.isMDXComponent=!0},34045:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});var i=s(87462),o=(s(67294),s(3905));const a={},r=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",id:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,i.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"products service"),": handles querying products from the database and returning them to the frontend"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"orders service"),": handles validating and creating orders"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"order history service"),": handles querying a customer's order history"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"payments service"),": handles processing orders for payment"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"digital identity service"),": handles storing digital identity and calculating identity score"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"api gateway"),": unifies services under a single endpoint"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"mongodb/ postgresql"),": serves as the primary database, storing orders, order history, products, etc."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"redis"),": serves as the ",(0,o.kt)("strong",{parentName:"li"},"stream processor")," and caching database")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You don't need to use MongoDB/ Postgresql as your primary database in the demo application; you can use other ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"prisma supported databases"))," as well. This is just an example.")))}p.isMDXComponent=!0},4975:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});var i=s(87462),o=(s(67294),s(3905));const a={},r=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-ecommerce",id:"howtos/solutions/microservices/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-ecommerce",permalink:"/howtos/solutions/microservices/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,i.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in\n",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis")," and MongoDB/ Postgressql using ",(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"Prisma"),". Below you will find screenshots of the frontend of the e-commerce app:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Dashboard"),": Shows the list of products with search functionality"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend products page",src:s(89628).Z,width:"2475",height:"1873"}))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Shopping Cart"),': Add products to the cart, then check out using the "Buy Now" button\n',(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend shopping cart",src:s(70114).Z,width:"2772",height:"1942"}))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Order history"),": Once an order is placed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Orders")," link in the top navigation bar shows the order status and history"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend order history page",src:s(61032).Z,width:"2511",height:"1351"})))))}p.isMDXComponent=!0},31788:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});var i=s(87462),o=(s(67294),s(3905));const a={},r=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-source-code-tip",id:"howtos/solutions/microservices/common-data/microservices-source-code-tip",title:"microservices-source-code-tip",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",permalink:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",tags:[],version:"current",lastUpdatedAt:1689359285,formattedLastUpdatedAt:"Jul 14, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,i.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,o.kt)("p",{parentName:"admonition"},"git clone --branch v4.2.0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}p.isMDXComponent=!0},71673:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});var i=s(87462),o=(s(67294),s(3905));const a={},r=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/redis-enterprise",id:"howtos/solutions/microservices/common-data/redis-enterprise",title:"redis-enterprise",description:"You can use Redis Cloud as a multi-model primary database. Redis Cloud is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or Flash. It also supports Active-Active (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes.",source:"@site/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/redis-enterprise",permalink:"/howtos/solutions/microservices/common-data/redis-enterprise",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",tags:[],version:"current",lastUpdatedAt:1700152680,formattedLastUpdatedAt:"Nov 16, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,i.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use ",(0,o.kt)("strong",{parentName:"p"},"Redis Cloud")," as a multi-model primary database. Redis Cloud is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or ",(0,o.kt)("strong",{parentName:"p"},"Flash"),". It also supports ",(0,o.kt)("strong",{parentName:"p"},"Active-Active")," (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes."),(0,o.kt)("p",null,"Redis Cloud has many built-in modular capabilities, making it a unified, real-time data platform. Redis Cloud is far more than a document database."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"JSON"),": Persists JSON documents"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Search"),": Indexes and searches JSON documents"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Probabilistic data structures"),": Provides bloom filters and other probabilistic data structures"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Time Series"),": Supports time series data structures"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Triggers and Functions"),": Syncs data to external databases via different pattern (write-behind/ write-through) or executes custom logic.")),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," to view your Redis data or to play with raw Redis commands in the workbench."),(0,o.kt)("p",null,"If you're interested in diving deeper, try ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/try-free"},"Redis Cloud")," today for free!"))}p.isMDXComponent=!0},3931:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/api-gateway-caching-with-redis-architecture-fa09723a61d2f07970cd8429a27e089b.png"},70114:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/design-cart-2-2a3b76656f26a754bed6a6c63ad8beef.png"},89628:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/design-dashboard-6a34137ca4862561cc2f065ed55ae081.png"},61032:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/design-order-history-16fc808f70b63d91a37a3ea76baa232d.png"}}]);